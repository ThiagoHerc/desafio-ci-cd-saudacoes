name: CI/CD - Saudações Aleatórias

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
    
    - name: Go Fmt & Vet
      run: |
        echo "Linting code..."
        go fmt $(go list ./...)
        go vet $(go list ./...)

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.58
        args: --verbose
  test:
    name: Test Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5    

    - name: Install gotestsum
      run: go install gotest.tools/gotestsum@latest

    - name: Run tests and generate report
      run: |
        echo "Running tests and generating report..."
        # CGO_ENABLED=1 é necessário se houver código C, mas requer gcc.
        # A imagem ubuntu-latest já tem o gcc.
        CGO_ENABLED=1 gotestsum --junitfile report.xml --format testname

  release:
    name: Build e Release da Imagem Docker
    runs-on: ubuntu-latest
    needs: [lint, test] # Garante que o lint e os testes passem primeiro
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    - name: Build e Push da Imagem
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USER }}/ms-saudacoes-aleatorias:latest
  deploy:
    name: Deploy no Koyeb via Terraform
    runs-on: ubuntu-latest
    needs: [release] # Depende do job de release
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init
      working-directory: ./infra # Indica onde os arquivos .tf estão
      env:
        KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./infra
      env:
        KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
  cleanup:
    name: Destruir Infraestrutura (Manual)
    runs-on: ubuntu-latest
    needs: [deploy] # Só pode destruir depois de um deploy
    environment: production # << ISSO FAZ A MÁGICA
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init
      working-directory: ./infra
      env:
        KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ./infra
      env:
        KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}    
